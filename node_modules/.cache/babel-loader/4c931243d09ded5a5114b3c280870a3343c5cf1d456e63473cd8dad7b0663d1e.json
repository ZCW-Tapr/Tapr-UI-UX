{"ast":null,"code":"/**\r\n * Finds matching touch patterns and returns an array of actions.\r\n *\r\n * @param {Object} zones     The zones object from context.\r\n * @param {number} fingers   Number of fingers detected.\r\n * @param {string} motion    Motion type detected.\r\n * @returns {string[]}       List of action strings to invoke.\r\n */\nexport function routeTouch(zones, fingers, motion) {\n  const actions = [];\n  Object.values(zones).forEach(zone => {\n    zone.touchPatterns.forEach(pattern => {\n      if (pattern.active && pattern.fingers === fingers && pattern.motion === motion) {\n        actions.push(...pattern.actions);\n      }\n    });\n  });\n  return actions;\n}","map":{"version":3,"names":["routeTouch","zones","fingers","motion","actions","Object","values","forEach","zone","touchPatterns","pattern","active","push"],"sources":["/mnt/c/Users/gcruz/Projects/Tapr/Tapr-UI-UX/src/utils/TouchRouter.js"],"sourcesContent":["/**\r\n * Finds matching touch patterns and returns an array of actions.\r\n *\r\n * @param {Object} zones     The zones object from context.\r\n * @param {number} fingers   Number of fingers detected.\r\n * @param {string} motion    Motion type detected.\r\n * @returns {string[]}       List of action strings to invoke.\r\n */\r\nexport function routeTouch(zones, fingers, motion) {\r\n  const actions = [];\r\n\r\n  Object.values(zones).forEach(zone => {\r\n    zone.touchPatterns.forEach(pattern => {\r\n      if (\r\n        pattern.active &&\r\n        pattern.fingers === fingers &&\r\n        pattern.motion === motion\r\n      ) {\r\n        actions.push(...pattern.actions);\r\n      }\r\n    });\r\n  });\r\n\r\n  return actions;\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAUA,CAACC,KAAK,EAAEC,OAAO,EAAEC,MAAM,EAAE;EACjD,MAAMC,OAAO,GAAG,EAAE;EAElBC,MAAM,CAACC,MAAM,CAACL,KAAK,CAAC,CAACM,OAAO,CAACC,IAAI,IAAI;IACnCA,IAAI,CAACC,aAAa,CAACF,OAAO,CAACG,OAAO,IAAI;MACpC,IACEA,OAAO,CAACC,MAAM,IACdD,OAAO,CAACR,OAAO,KAAKA,OAAO,IAC3BQ,OAAO,CAACP,MAAM,KAAKA,MAAM,EACzB;QACAC,OAAO,CAACQ,IAAI,CAAC,GAAGF,OAAO,CAACN,OAAO,CAAC;MAClC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOA,OAAO;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}